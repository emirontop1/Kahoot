// solvePasswordGame.js

async function solvePasswordGame() {
    let password = "A!a";

    const editableDiv = document.querySelector('div[contenteditable="true"]');
    if (!editableDiv) {
        console.error("Hata: 'contenteditable' niteliÄŸine sahip bir alan bulunamadÄ±.");
        return;
    }

    // "Please choose a password" yazÄ±sÄ±nÄ± deÄŸiÅŸtir
    const passwordLabel = document.querySelector('div.password-label[data-v-46f3d879]');
    if (passwordLabel) {
        const gifUrl = "https://tenor.com/tr/view/lemonhota-elraenn-rraenee-limon-tayfa-twitch-t%C3%BCrkiye-gif-13401529742757133867.gif";
        const newHtml = `
            <div class="modded-container">
                <img src="${gifUrl}" alt="sol-gif" class="modded-gif">
                <span class="modded-text">Modded by Emocii</span>
                <img src="${gifUrl}" alt="saÄŸ-gif" class="modded-gif">
            </div>
            <div class="subtitle">Kudurma Hurinaz</div>
        `;
        passwordLabel.innerHTML = newHtml;

        if (!document.getElementById("modded-styles")) {
            const style = document.createElement('style');
            style.id = "modded-styles";
            style.innerHTML = `
                .password-label {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                }
                .modded-container {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .modded-gif {
                    width: 50px;
                    height: auto;
                    margin: 0 10px;
                }
                .modded-text {
                    font-size: 24px;
                    font-weight: bold;
                    background-image: linear-gradient(to right, #FFCC00, #004D99);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    white-space: nowrap;
                }
                .subtitle {
                    font-size: 14px;
                    color: #555;
                    margin-top: 5px;
                    font-style: italic;
                }
            `;
            document.head.appendChild(style);
        }
    }

    function updatePassword() {
        editableDiv.textContent = password;
        const event = new Event('input', { bubbles: true });
        editableDiv.dispatchEvent(event);
    }

    function calculateDigitSum(str) {
        let sum = 0;
        for (const char of str) {
            if (!isNaN(parseInt(char))) sum += parseInt(char);
        }
        return sum;
    }

    function calculateRomanSum(str) {
        let sum = 0;
        const romanValues = { 'I': 1, 'V': 5, 'X': 10, 'L': 50 };
        const romanChars = str.match(/[IVX]/g) || [];
        for (const char of romanChars) sum += romanValues[char] || 0;
        return sum;
    }

    const periodicSymbol = "Fe";

    function getMoonPhaseEmoji() {
        const today = new Date();
        const moonEmojis = ["ðŸŒ‘", "ðŸŒ’", "ðŸŒ“", "ðŸŒ”", "ðŸŒ•", "ðŸŒ–", "ðŸŒ—", "ðŸŒ˜"];
        const year = today.getFullYear();
        const month = today.getMonth() + 1;
        const day = today.getDate();
        let yy = year - Math.floor((12 - month) / 10);
        let mm = month + 9;
        if (mm >= 12) {
            mm = mm - 12;
        }
        const k = Math.floor(365.25 * (yy + 4712)) + Math.floor(30.6 * mm + 0.5) + day - 1524.5;
        const j = k - 2451550.1;
        const jd = j / 29.53058867;
        const b = jd - Math.floor(jd);
        const index = Math.round(b * 8 + 8) % 8;
        return moonEmojis[index];
    }

    async function getCountryFromIframe() {
        const iframe = document.querySelector('iframe.geo');
        if (!iframe || !iframe.src) return null;
        const coordsMatch = iframe.src.match(/!1d([-\d.]+)!2d([-\d.]+)/);
        if (!coordsMatch) return null;
        const lat = coordsMatch[1];
        const lng = coordsMatch[2];
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=en`);
            const data = await response.json();
            const countryName = data.address.country;
            if (!countryName) return null;
            return countryName;
        } catch (e) {
            console.error("Country fetch error:", e);
            return null;
        }
    }

    function refreshCaptcha() {
        const refreshBtn = document.querySelector('.captcha-refresh');
        if (refreshBtn) {
            refreshBtn.click();
        }
    }

    // Kural bayraklarÄ±
    let wordleAnswerEntered = false;
    let periodicSymbolEntered = false;
    let moonEmojiEntered = false;
    let countryNameEntered = false;
    let leapYearEntered = false;
    let saporeEntered = false;
    let chessMoveEntered = false;
    let currentCaptchaText = "";

    const months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
    const sponsors = ["Pepsi", "Starbucks", "Shell"];

    const intervalId = setInterval(async () => {
        // **Ã–NCELÄ°KLÄ° KONTROL:** EÄŸer "Illegal move" hatasÄ± varsa
        const illegalMoveError = document.querySelector('div.rule.chess.rule-error');
        if (illegalMoveError && illegalMoveError.textContent.includes("Illegal move")) {
            console.log("Illegal move hatasÄ± tespit edildi. Sorunlu kÄ±sÄ±m temizleniyor.");

            let tempPassword = password;

            // Ã–nceki CAPTCHA'yÄ± ve rakamlarÄ±nÄ± temizle
            if (currentCaptchaText) {
                tempPassword = tempPassword.replace(currentCaptchaText, '');
            }

            // Rakam toplamÄ± kuralÄ± iÃ§in eklenen son rakamlarÄ± temizle
            tempPassword = tempPassword.replace(/\d+$/, '');

            password = tempPassword;
            updatePassword();

            refreshCaptcha();
            return;
        }

        // Kural 15: ArtÄ±k YÄ±l (En baÅŸa alÄ±ndÄ±)
        if (!leapYearEntered) {
            const leapYear = 2024;
            const leapYearString = leapYear.toString();
            if (!password.includes(leapYearString)) {
                password = leapYearString + password;
                leapYearEntered = true;
                updatePassword();
                return;
            }
        }

        // Kural 1: GerÃ§ek ayÄ± ekle
        const hasMonth = months.some(m => password.includes(m));
        if (!hasMonth) {
            password += months[new Date().getMonth()];
            updatePassword();
            return;
        }

        // Kural 2: Sponsor ekle
        const hasSponsor = sponsors.some(s => password.includes(s));
        if (!hasSponsor) {
            password += sponsors[Math.floor(Math.random() * sponsors.length)];
            updatePassword();
            return;
        }

        // Kural 3: Romen rakamlarÄ± toplamÄ± 35
        const targetRomanSum = 35;
        let currentRomanSum = calculateRomanSum(password);
        if (currentRomanSum !== targetRomanSum) {
            let remaining = targetRomanSum - currentRomanSum;
            let roman = "";
            while (remaining >= 10) { roman += "X"; remaining -= 10; }
            if (remaining >= 5) { roman += "V"; remaining -= 5; }
            while (remaining > 0) { roman += "I"; remaining -= 1; }
            password += roman;
            updatePassword();
            return;
        }

        // Kural 4: Wordle cevabÄ± (prompt ile kullanÄ±cÄ±dan istenir)
        if (!wordleAnswerEntered) {
            const wordleAnswer = prompt("LÃ¼tfen gÃ¼nÃ¼n Wordle cevabÄ±nÄ± girin:");
            if (wordleAnswer && !password.includes(wordleAnswer.toLowerCase())) {
                password += wordleAnswer.toLowerCase();
            }
            wordleAnswerEntered = true;
            updatePassword();
            return;
        }

        // Kural 5: Periyodik sembol Fe
        if (!periodicSymbolEntered) {
            if (!password.includes(periodicSymbol)) {
                password += periodicSymbol;
                periodicSymbolEntered = true;
                updatePassword();
                return;
            }
        }

        // Kural 6: Ay Evresi Emojisi
        if (!moonEmojiEntered) {
            const moon = getMoonPhaseEmoji();
            if (!password.includes(moon)) {
                password += moon;
                moonEmojiEntered = true;
                updatePassword();
                return;
            }
        }
        

        // Kural 7: Ãœlke AdÄ± (iframe'den alÄ±nÄ±r)
        if (!countryNameEntered) {
            const country = await getCountryFromIframe();
            if (country) {
                const lowercaseCountry = country.toLowerCase();
                if (!password.includes(lowercaseCountry)) {
                    password += lowercaseCountry;
                    countryNameEntered = true;
                    updatePassword();
                    return;
                }
            }
        }

        // Kural 8: Captcha
        const captchaImg = document.querySelector('img[src*="/password-game/captchas/"]');
        if (captchaImg) {
            const src = captchaImg.src;
            const captchaText = src.substring(src.lastIndexOf('/') + 1, src.lastIndexOf('.'));
            currentCaptchaText = captchaText;
            if (!password.includes(captchaText)) {
                const targetSum = 25;
                let currentSum = calculateDigitSum(password);
                const digits = (captchaText.match(/\d/g) || []).map(d => parseInt(d));
                const captchaSum = digits.reduce((a, b) => a + b, 0);
                if (currentSum + captchaSum > targetSum) {
                    let diff = currentSum + captchaSum - targetSum;
                    let nonDigitPass = password.replace(/\d/g, "");
                    let digitPass = password.match(/\d/g) || [];
                    let newDigits = "";
                    for (let i = digitPass.length - 1; i >= 0 && diff > 0; i--) {
                        let d = parseInt(digitPass[i]);
                        if (d <= diff) { diff -= d; } else { newDigits = (d - diff) + newDigits; diff = 0; }
                    }
                    password = nonDigitPass + newDigits + captchaText;
                } else {
                    password += captchaText;
                }
                updatePassword();
                return;
            }
        }

        // Kural 9: RakamlarÄ±n ToplamÄ± 25
        const targetSum = 25;
        let currSum = calculateDigitSum(password);
        if (currSum > targetSum) {
            let diff = currSum - targetSum;
            let newPass = "";
            let rem = diff;
            for (let i = password.length - 1; i >= 0; i--) {
                let ch = password[i];
                let d = parseInt(ch);
                if (!isNaN(d) && rem > 0) {
                    let remove = Math.min(d, rem);
                    rem -= remove;
                    if (d - remove > 0) newPass = (d - remove) + newPass;
                } else newPass = ch + newPass;
            }
            password = newPass;
        }
        while (calculateDigitSum(password) < targetSum) password += "5";
        updatePassword();

        // Kural 23: SatranÃ§ Hamlesi
        if (!chessMoveEntered) {
            const chessRuleDiv = document.querySelector('div.rule.chess');
            if (chessRuleDiv && chessRuleDiv.textContent.includes("best move")) {
                const simpleChessMoves = ["a3", "b3", "c3", "e3", "g3", "h3"];
                const randomMove = simpleChessMoves[Math.floor(Math.random() * simpleChessMoves.length)];
                if (!password.includes(randomMove)) {
                    password += randomMove;
                    chessMoveEntered = true;
                    updatePassword();
                    return;
                }
            }
        }

        // TÃ¼m kurallar tamamlandÄ±ÄŸÄ±nda dÃ¶ngÃ¼yÃ¼ durdur
        const allRulesCompleted =
            hasMonth && hasSponsor && (calculateRomanSum(password) === 35) &&
            wordleAnswerEntered && periodicSymbolEntered && moonEmojiEntered &&
            saporeEntered && countryNameEntered && leapYearEntered &&
            (calculateDigitSum(password) === 25) &&
            (chessMoveEntered || !document.querySelector('div.rule.chess'));

        if (allRulesCompleted) {
            clearInterval(intervalId);
            console.log("TÃ¼m kurallar baÅŸarÄ±yla tamamlandÄ±. Otomatik Ã§Ã¶zme durduruldu.");
        }
    }, 100);
}

// Fonksiyonu Ã§alÄ±ÅŸtÄ±r
solvePasswordGame();
